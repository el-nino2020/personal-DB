package view.function_panel;/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

import domain.DirectoryInfo;
import utils.GUIUtility;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.*;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;

/**
 * @author Morgan
 */
public class AllDBTablePanel extends javax.swing.JPanel {


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tableNameLabel = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();
        tablePanel = new javax.swing.JScrollPane();
        table = trueTable;
        tableNameTextField = new javax.swing.JTextField();
        tableNoteLabel = new javax.swing.JLabel();
        noteScrollPane = new javax.swing.JScrollPane();
        noteTextArea = new javax.swing.JTextArea();
        filterLabel = new javax.swing.JLabel();
        filterTextField = new javax.swing.JTextField();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setToolTipText("");

        tableNameLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 21)); // NOI18N
        tableNameLabel.setText("表名：");
        tableNameLabel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        titleLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 22)); // NOI18N
        titleLabel.setText("所有表");

        table.setModel(allDBTableModel);
        table.setToolTipText("");
        tablePanel.setViewportView(table);

        tableNameTextField.setEditable(false);
        tableNameTextField.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 21)); // NOI18N
        tableNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableNameTextFieldActionPerformed(evt);
            }
        });

        tableNoteLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 21)); // NOI18N
        tableNoteLabel.setText("说明：");
        tableNoteLabel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        noteTextArea.setEditable(false);
        noteTextArea.setColumns(20);
        noteTextArea.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 21)); // NOI18N
        noteTextArea.setLineWrap(true);
        noteTextArea.setRows(5);
        noteTextArea.setText("文件摘要");
        noteScrollPane.setViewportView(noteTextArea);

        filterLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 21)); // NOI18N
        filterLabel.setText("正则过滤：");
        filterLabel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        filterTextField.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 21)); // NOI18N
        filterTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(534, 534, 534)
                                                .addComponent(titleLabel))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(31, 31, 31)
                                                .addComponent(tablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(42, 42, 42)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(tableNameLabel)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(tableNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(tableNoteLabel)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(noteScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(34, 34, 34)
                                                .addComponent(filterLabel)
                                                .addGap(18, 18, 18)
                                                .addComponent(filterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(56, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(titleLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(tablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(tableNameLabel)
                                                        .addComponent(tableNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(tableNoteLabel)
                                                        .addComponent(noteScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(37, 37, 37)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(filterLabel)
                                                        .addComponent(filterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap(14, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tableNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tableNameTextFieldActionPerformed

    private void filterTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filterTextFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel filterLabel;
    private javax.swing.JTextField filterTextField;
    private javax.swing.JScrollPane noteScrollPane;
    private javax.swing.JTextArea noteTextArea;
    private javax.swing.JTable table;
    private javax.swing.JLabel tableNameLabel;
    private javax.swing.JTextField tableNameTextField;
    private javax.swing.JLabel tableNoteLabel;
    private javax.swing.JScrollPane tablePanel;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables

    /////////////////////////////////////////////////////////////////////////////////////////////////////
    //my code starts here


    /**
     * Creates new form AllDBTablePanel
     */
    public AllDBTablePanel() {
        initComponents();
        initTableSetting();
        addFilterTextFieldEvent();
    }

    private List<DirectoryInfo> directoryInfos = new ArrayList<>();

    public void setDirectoryInfos(List<DirectoryInfo> directoryInfos) {
        this.directoryInfos = directoryInfos;
    }

    //定义trueTable只是为了重写JTable中的getToolTipText方法，`trueTable`和`table`指向同一个对象
    private JTable trueTable = new JTable() {
        @Override
        public String getToolTipText(MouseEvent event) {
            Point point = event.getPoint();
            TableModel model = getModel();


            int rowIndex = rowAtPoint(point);
            int columnIndex = columnAtPoint(point);
            //TODO 要check两遍，考虑将check的代码封装成方法
            if (!(0 <= rowIndex && rowIndex < model.getRowCount() &&
                    0 <= columnIndex && columnIndex < model.getColumnCount()))
                return null;

            rowIndex = convertRowIndexToModel(rowIndex);
            columnIndex = convertColumnIndexToModel(columnIndex);

            if (0 <= rowIndex && rowIndex < model.getRowCount() &&
                    0 <= columnIndex && columnIndex < model.getColumnCount())
                return model.getValueAt(rowIndex, columnIndex).toString();
            return null;
        }
    };

    public void notifyTableDataChanged() {
        allDBTableModel.setDirectoryInfos(directoryInfos);
        //参考：https://stackoverflow.com/a/7908004
        allDBTableModel.fireTableDataChanged();
    }

    private AllDBTableModel allDBTableModel = new AllDBTableModel(directoryInfos);


    private class AllDBTableModel extends AbstractTableModel {
        private String[] columnNames = {"ID", "DIR_NAME", "NOTE"};
        private List<DirectoryInfo> directoryInfos;

        public void setDirectoryInfos(List<DirectoryInfo> directoryInfos) {
            this.directoryInfos = directoryInfos;
        }

        public AllDBTableModel(List<DirectoryInfo> directoryInfos) {
            this.directoryInfos = directoryInfos;
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
//            return getValueAt(0, columnIndex).getClass();
            return String.class;
        }

        @Override
        public int getRowCount() {
            return directoryInfos.size();
        }

        @Override
        public int getColumnCount() {
            return 3;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return directoryInfos.get(rowIndex).getId() +"";
                case 1:
                    return directoryInfos.get(rowIndex).getDirname();
                case 2:
                    return directoryInfos.get(rowIndex).getNote();
                default:
                    return null;
            }
        }

        @Override
        public String getColumnName(int index) {
            return columnNames[index];
        }
    }


    private void initTableSetting() {
        table.setFillsViewportHeight(true);

        //列的宽度
        TableColumnModel columnModel = table.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(10);
        columnModel.getColumn(1).setPreferredWidth(100);
        columnModel.getColumn(2).setPreferredWidth(300);

        //行的宽度
        table.setRowHeight(30);
        GUIUtility.setFont(table);

        JTableHeader tableHeader = table.getTableHeader();
        GUIUtility.setFont(tableHeader);

        //关于选择单元格：只允许单选
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);


        table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                int rowIndex = table.getSelectedRow();
                TableModel model = table.getModel();
                if (!(0 <= rowIndex && rowIndex < model.getRowCount())) return;

                int row = table.convertRowIndexToModel(rowIndex);
                tableNameTextField.setText(model.getValueAt(row, 1).toString());
                noteTextArea.setText(model.getValueAt(row, 2).toString());
            }
        });
    }

    private TableRowSorter<AllDBTableModel> sorter;


    private void addFilterTextFieldEvent() {
        sorter = new TableRowSorter<>((AllDBTableModel) table.getModel());
        table.setRowSorter(sorter);

        filterTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                newFilter();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                newFilter();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                newFilter();
            }
        });
    }

    private void newFilter() {
        RowFilter<AllDBTableModel, Object> filter = null;
        try {
            filter = RowFilter.regexFilter(filterTextField.getText());
        } catch (java.util.regex.PatternSyntaxException e) {
            return;
        }
        sorter.setRowFilter(filter);
    }

}







